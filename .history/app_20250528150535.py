import streamlit as st
import torch
import torchvision.transforms as transforms
from PIL import Image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from src.model import get_model
from src.visualization import apply_cam
import tempfile
import os
os.environ['STREAMLIT_SERVER_WATCH_DIRS'] = 'false'
import io
from datetime import datetime
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors as reportlab_colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import matplotlib
matplotlib.use('Agg')

# Thi·∫øt l·∫≠p trang v·ªõi giao di·ªán m·ªõi
st.set_page_config(
    page_title="AI X-Ray Lung Scanner", 
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="ü´Å"
)

# ƒêƒÉng k√Ω font h·ªó tr·ª£ ti·∫øng Vi·ªát
font_paths = [
    os.path.join(os.path.dirname(__file__), 'DejaVuSans.ttf'),
    os.path.join(os.path.dirname(__file__), 'fonts', 'DejaVuSans.ttf'),
    'DejaVuSans.ttf'
]

font_registered = False
for font_path in font_paths:
    if os.path.exists(font_path):
        try:
            pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
            font_registered = True
            break
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font t·ª´ {font_path}: {e}")

if not font_registered:
    st.warning("Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font DejaVuSans. S·∫Ω s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh.")

# Import CSS t·ª´ file ri√™ng
with open('style.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# T·∫£i m√¥ h√¨nh
@st.cache_resource
def load_model():
    model = get_model(num_classes=2)
    model.load_state_dict(torch.load('models/best_model.pth', map_location=torch.device('cpu')))
    model.eval()
    return model

# Ti·ªÅn x·ª≠ l√Ω ·∫£nh
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# T·∫°o b√°o c√°o PDF (gi·ªØ nguy√™n)
def create_pdf_report(image, cam_image, prediction, prob_normal, prob_tb, process_time, filename=None):
    buffer = io.BytesIO()
    
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    
    styles = getSampleStyleSheet()
    
    vietnamese_font = 'DejaVuSans'
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        styles.add(ParagraphStyle(name='Vietnamese', fontName=vietnamese_font, fontSize=12))
    else:
        styles.add(ParagraphStyle(name='Vietnamese', fontName='Helvetica', fontSize=12))
    
    elements = []
    
    title_style = styles["Heading1"]
    title_style.alignment = 1
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        title_style.fontName = vietnamese_font
    elements.append(Paragraph("K·∫æT QU·∫¢ PH√ÇN T√çCH X-QUANG PH·ªîI", title_style))
    elements.append(Spacer(1, 20))
    
    date_style = styles["Normal"]
    date_style.alignment = 1
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        date_style.fontName = vietnamese_font
    current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    elements.append(Paragraph(f"Ng√†y gi·ªù ph√¢n t√≠ch: {current_time}", date_style))
    elements.append(Spacer(1, 20))
    
    if filename:
        file_style = styles["Normal"]
        if vietnamese_font in pdfmetrics.getRegisteredFontNames():
            file_style.fontName = vietnamese_font
        elements.append(Paragraph(f"T√™n file: {filename}", file_style))
        elements.append(Spacer(1, 10))
    
    img_path = tempfile.mktemp(suffix='.png')
    cam_path = tempfile.mktemp(suffix='.png')
    
    image.save(img_path)
    
    if isinstance(cam_image, np.ndarray):
        cam_image_pil = Image.fromarray(cam_image)
        cam_image_pil.save(cam_path)
    else:
        cam_image.save(cam_path)
    
    heading_style = styles["Heading2"]
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        heading_style.fontName = vietnamese_font
    
    elements.append(Paragraph("·∫¢nh X-quang g·ªëc:", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(img_path, width=400, height=300))
    elements.append(Spacer(1, 20))
    
    elements.append(Paragraph("·∫¢nh ph√¢n t√≠ch (CAM):", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(cam_path, width=400, height=300))
    elements.append(Spacer(1, 20))
    
    elements.append(Paragraph("K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN:", heading_style))
    elements.append(Spacer(1, 10))
    
    if prediction == 1:
        result_text = "PH√ÅT HI·ªÜN D·∫§U HI·ªÜU LAO PH·ªîI"
        result_color = reportlab_colors.red
    else:
        result_text = "KH√îNG PH√ÅT HI·ªÜN D·∫§U HI·ªÜU LAO PH·ªîI"
        result_color = reportlab_colors.green
    
    result_style = ParagraphStyle(
        name='ResultStyle',
        parent=styles["Heading2"],
        textColor=result_color,
        alignment=1
    )
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        result_style.fontName = vietnamese_font
    elements.append(Paragraph(result_text, result_style))
    elements.append(Spacer(1, 20))
    
    data = [
        ["Th√¥ng s·ªë", "Gi√° tr·ªã"],
        ["X√°c su·∫•t b√¨nh th∆∞·ªùng", f"{prob_normal:.2%}"],
        ["X√°c su·∫•t lao ph·ªïi", f"{prob_tb:.2%}"],
        ["Th·ªùi gian x·ª≠ l√Ω", f"{process_time:.2f} gi√¢y"]
    ]

    table = Table(data, colWidths=[200, 200])

    use_font = vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica'
    bold_font = vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica-Bold'

    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), reportlab_colors.grey),
        ('TEXTCOLOR', (0, 0), (1, 0), reportlab_colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), bold_font),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), reportlab_colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, reportlab_colors.black),
        ('FONTNAME', (0, 1), (0, -1), use_font),
        ('FONTNAME', (1, 1), (1, -1), use_font),
    ]))
    
    elements.append(table)
    elements.append(Spacer(1, 20))
    
    note_heading_style = styles["Heading3"]
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        note_heading_style.fontName = vietnamese_font
    elements.append(Paragraph("L∆∞u √Ω:", note_heading_style))
    elements.append(Paragraph("K·∫øt qu·∫£ n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Vui l√≤ng tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© chuy√™n khoa ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c.", styles["Vietnamese"]))
    
    doc.build(elements)
    
    os.unlink(img_path)
    os.unlink(cam_path)
    
    buffer.seek(0)
    return buffer

# GIAO DI·ªÜN M·ªöI - HEADER V·ªöI THI·∫æT K·∫æ CARD FLOATING
st.markdown("""
<div class="hero-section">
    <div class="floating-card">
        <div class="card-header">
            <div class="icon-wrapper">
                <div class="pulse-ring"></div>
                <div class="medical-icon">ü´Å</div>
            </div>
            <div class="title-section">
                <h1 class="main-title">AI LUNG DIAGNOSTICS</h1>
                <p class="tagline">H·ªá th·ªëng ch·∫©n ƒëo√°n th√¥ng minh cho X-quang ph·ªïi</p>
                <div class="feature-badges">
                    <span class="badge">ü§ñ AI-Powered</span>
                    <span class="badge">‚ö° Nhanh ch√≥ng</span>
                    <span class="badge">üéØ Ch√≠nh x√°c</span>
                </div>
            </div>
        </div>
    </div>
</div>
""", unsafe_allow_html=True)

# T·∫£i m√¥ h√¨nh v·ªõi progress bar m·ªõi
try:
    with st.spinner("üîÑ Kh·ªüi t·∫°o h·ªá th·ªëng AI..."):
        model = load_model()
        last_conv_layer = model.layer4[-1]
    
    st.markdown("""
    <div class="success-notification">
        <div class="notification-icon">‚ú®</div>
        <div class="notification-text">H·ªá th·ªëng AI ƒë√£ s·∫µn s√†ng ho·∫°t ƒë·ªông!</div>
    </div>
    """, unsafe_allow_html=True)
except Exception as e:
    st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh: {e}")
    st.stop()

# T·∫£i d·ªØ li·ªáu chatbot
@st.cache_data
def load_chatbot_data():
    try:
        csv_path = "/home/nquang/C_CODE/2_DACN-1/tb_detection/data/chatbot_rules.csv"
        if not os.path.exists(csv_path):
            csv_path = "chatbot_rules.csv"
        
        df = pd.read_csv(csv_path)
        qa_dict = dict(zip(df["Question"], df["Answer"]))
        return qa_dict
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu chatbot: {e}")
        return {}

# SIDEBAR M·ªöI V·ªöI NAVIGATION
with st.sidebar:
    st.markdown("""
    <div class="sidebar-header">
        <div class="sidebar-icon">üî¨</div>
        <h2>AI Lung Diagnostics</h2>
      
    </div>
    """, unsafe_allow_html=True)
    
  
    
    # Ho·∫∑c s·ª≠ d·ª•ng buttons thay th·∫ø
    st.markdown("---")
    st.markdown("**üéØ Ch·ªçn ch·ª©c nƒÉng:**")
    
    # Kh·ªüi t·∫°o session state n·∫øu ch∆∞a c√≥
    if "selected_function" not in st.session_state:
        st.session_state.selected_function = "üîç Ph√¢n t√≠ch ƒë∆°n l·∫ª"
    
    # T·∫°o buttons cho t·ª´ng ch·ª©c nƒÉng
    if st.button("üîç Ph√¢n t√≠ch ƒë∆°n l·∫ª", key="btn_single", use_container_width=True):
        st.session_state.selected_function = "üîç Ph√¢n t√≠ch ƒë∆°n l·∫ª"
    
    if st.button("üìä Ph√¢n t√≠ch h√†ng lo·∫°t", key="btn_batch", use_container_width=True):
        st.session_state.selected_function = "üìä Ph√¢n t√≠ch h√†ng lo·∫°t"
    
    if st.button("ü§ñ Tr·ª£ l√Ω AI", key="btn_ai", use_container_width=True):
        st.session_state.selected_function = "ü§ñ Tr·ª£ l√Ω AI"
    
    if st.button("‚ÑπÔ∏è H∆∞·ªõng d·∫´n", key="btn_guide", use_container_width=True):
        st.session_state.selected_function = "‚ÑπÔ∏è H∆∞·ªõng d·∫´n"
    
    # Hi·ªÉn th·ªã ch·ª©c nƒÉng ƒë∆∞·ª£c ch·ªçn
    st.markdown(f"**ƒêang s·ª≠ d·ª•ng:** {st.session_state.selected_function}")
    
    # Th·ªëng k√™ h·ªá th·ªëng
    st.markdown("---")
    st.markdown("""
    <div class="sidebar-stats">
        <div class="stats-title">üìà Th·ªëng k√™ h·ªá th·ªëng</div>
        <div class="stat-item">
            <div class="stat-icon">üéØ</div>
            <div class="stat-info">
                <div class="stat-value">99.2%</div>
                <div class="stat-label">ƒê·ªô ch√≠nh x√°c</div>
            </div>
        </div>
        <div class="stat-item">
            <div class="stat-icon">‚ö°</div>
            <div class="stat-info">
                <div class="stat-value">< 3s</div>
                <div class="stat-label">Th·ªùi gian x·ª≠ l√Ω</div>
            </div>
        </div>
        <div class="stat-item">
            <div class="stat-icon">üî¨</div>
            <div class="stat-info">
                <div class="stat-value">ResNet</div>
                <div class="stat-label">M√¥ h√¨nh AI</div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# S·ª≠ d·ª•ng session state thay v√¨ bi·∫øn selected_tab
selected_tab = st.session_state.selected_function


# MAIN CONTENT AREA
if selected_tab == "üîç Ph√¢n t√≠ch ƒë∆°n l·∫ª":
    st.markdown("""
    <div class="content-section">
        <div class="section-title">
            <span class="title-icon">üîç</span>
            <h2>Ph√¢n t√≠ch ·∫£nh X-quang ƒë∆°n l·∫ª</h2>
        </div>
        <p class="section-desc">T·∫£i l√™n m·ªôt ·∫£nh X-quang ƒë·ªÉ ph√¢n t√≠ch v√† nh·∫≠n k·∫øt qu·∫£ ch·∫©n ƒëo√°n chi ti·∫øt</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Layout m·ªõi cho upload
    upload_col, preview_col = st.columns([1, 1])
    
    with upload_col:
        st.markdown("""
        <div class="upload-section">
            <div class="upload-header">
                <h3>üìÅ T·∫£i l√™n ·∫£nh X-quang</h3>
                <p>H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG</p>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh X-quang",
            type=["jpg", "jpeg", "png"],
            key="single_upload",
            help="K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn file"
        )
        
        if uploaded_file:
            image = Image.open(uploaded_file).convert('RGB')
            
            # Action buttons v·ªõi thi·∫øt k·∫ø m·ªõi
            btn_col1, btn_col2 = st.columns(2)
            with btn_col1:
                analyze_btn = st.button("üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch", key="analyze_single", type="primary")
            with btn_col2:
                reset_btn = st.button("üîÑ L√†m m·ªõi", key="reset_single")
            
            if reset_btn:
                st.rerun()
            
            if analyze_btn:
                with st.spinner("üî¨ ƒêang ph√¢n t√≠ch..."):
                    temp_dir = tempfile.mkdtemp()
                    temp_file_path = os.path.join(temp_dir, uploaded_file.name)
                    image.save(temp_file_path)
                    
                    cam_image, prediction, prob_normal, prob_tb, process_time = apply_cam(
                        temp_file_path, model, preprocess, last_conv_layer)
                    
                    with preview_col:
                        # Hi·ªÉn th·ªã k·∫øt qu·∫£ v·ªõi thi·∫øt k·∫ø card m·ªõi
                        if prediction == 1:
                            st.markdown("""
                            <div class="result-alert danger">
                                <div class="alert-icon">‚ö†Ô∏è</div>
                                <div class="alert-content">
                                    <h3>Ph√°t hi·ªán b·∫•t th∆∞·ªùng</h3>
                                    <p>C√≥ d·∫•u hi·ªáu nghi ng·ªù lao ph·ªïi</p>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("""
                            <div class="result-alert success">
                                <div class="alert-icon">‚úÖ</div>
                                <div class="alert-content">
                                    <h3>K·∫øt qu·∫£ b√¨nh th∆∞·ªùng</h3>
                                    <p>Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu b·∫•t th∆∞·ªùng</p>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                        
                        # Hi·ªÉn th·ªã ·∫£nh CAM
                        st.markdown('<div class="image-viewer">', unsafe_allow_html=True)
                        st.image(cam_image, caption="üéØ V√πng ph√¢n t√≠ch CAM", use_container_width=True)
                        st.markdown('</div>', unsafe_allow_html=True)
                        
                        # Bi·ªÉu ƒë·ªì x√°c su·∫•t m·ªõi
                        fig, ax = plt.subplots(figsize=(8, 4))
                        categories = ['B√¨nh th∆∞·ªùng', 'Lao ph·ªïi']
                        values = [prob_normal, prob_tb]
                        colors = ['#00D4AA', '#FF6B6B']
                        
                        bars = ax.barh(categories, values, color=colors)
                        ax.set_xlim(0, 1)
                        ax.set_xlabel('X√°c su·∫•t')
                        ax.set_title('üìä Ph√¢n t√≠ch x√°c su·∫•t', fontweight='bold')
                        
                        for i, (bar, value) in enumerate(zip(bars, values)):
                            ax.text(value + 0.02, i, f'{value:.1%}', 
                                   va='center', fontweight='bold')
                        
                        st.pyplot(fig)
                        
                        # Th√¥ng tin chi ti·∫øt
                        st.markdown(f"""
                        <div class="info-panel">
                            <div class="info-row">
                                <span class="info-label">‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω:</span>
                                <span class="info-value">{process_time:.2f}s</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">üìÑ T√™n file:</span>
                                <span class="info-value">{uploaded_file.name}</span>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        # PDF download
                        pdf_buffer = create_pdf_report(
                            image, cam_image, prediction, prob_normal, prob_tb, process_time, uploaded_file.name)
                        
                        st.download_button(
                            label="üìã T·∫£i b√°o c√°o PDF",
                            data=pdf_buffer,
                            file_name=f"bao_cao_{uploaded_file.name.split('.')[0]}.pdf",
                            mime="application/pdf",
                            key="download_single_pdf"
                        )
    
    with preview_col:
        if uploaded_file:
            st.markdown('<div class="image-viewer">', unsafe_allow_html=True)
            st.image(image, caption="üì∏ ·∫¢nh X-quang g·ªëc", use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)

elif selected_tab == "üìä Ph√¢n t√≠ch h√†ng lo·∫°t":
    st.markdown("""
    <div class="content-section">
        <div class="section-title">
            <span class="title-icon">üìä</span>
            <h2>Ph√¢n t√≠ch h√†ng lo·∫°t</h2>
        </div>
        <p class="section-desc">T·∫£i l√™n nhi·ªÅu ·∫£nh X-quang ƒë·ªÉ ph√¢n t√≠ch ƒë·ªìng th·ªùi v√† so s√°nh k·∫øt qu·∫£</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Kh·ªüi t·∫°o session state
    if "uploaded_files_multiple" not in st.session_state:
        st.session_state.uploaded_files_multiple = []
    if "analysis_results" not in st.session_state:
        st.session_state.analysis_results = {
            "results": [], "images": [], "cam_images": [], "predictions": [],
            "probs_normal": [], "probs_tb": [], "process_times": [], 
            "filenames": [], "pdf_buffers": []
        }

    # Upload zone m·ªõi
    st.markdown("""
    <div class="upload-section">
        <div class="upload-header">
            <h3>üìÅ T·∫£i l√™n nhi·ªÅu ·∫£nh X-quang</h3>
            <p>Ch·ªçn nhi·ªÅu file c√πng l√∫c ƒë·ªÉ ph√¢n t√≠ch h√†ng lo·∫°t</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    uploaded_files = st.file_uploader(
        "Ch·ªçn nhi·ªÅu ·∫£nh X-quang",
        type=["jpg", "jpeg", "png"],
        accept_multiple_files=True,
        key="multiple_upload"
    )
    
    if uploaded_files:
        st.session_state.uploaded_files_multiple = uploaded_files
        
        st.markdown(f"""
        <div class="upload-summary">
            <span class="summary-icon">üìÅ</span>
            <span class="summary-text">ƒê√£ t·∫£i l√™n {len(uploaded_files)} ·∫£nh</span>
        </div>
        """, unsafe_allow_html=True)
        
        # Preview grid
        st.markdown('<div class="preview-grid">', unsafe_allow_html=True)
        cols = st.columns(4)
        for i, uploaded_file in enumerate(uploaded_files[:8]):
            with cols[i % 4]:
                image = Image.open(uploaded_file).convert('RGB')
                st.image(image, caption=uploaded_file.name, use_container_width=True)
        
        if len(uploaded_files) > 8:
            st.markdown(f'<div class="more-files">+{len(uploaded_files) - 8} ·∫£nh kh√°c</div>', unsafe_allow_html=True)
        st.markdown('</div>', unsafe_allow_html=True)
        
        # Action buttons
        action_col1, action_col2 = st.columns(2)
        with action_col1:
            analyze_all = st.button("üöÄ Ph√¢n t√≠ch t·∫•t c·∫£", key="analyze_multiple", type="primary")
        with action_col2:
            reset_all = st.button("üîÑ L√†m m·ªõi", key="reset_multiple")
        
        if reset_all:
            for key in ["multiple_upload", "uploaded_files_multiple", "analysis_results"]:
                if key in st.session_state:
                    del st.session_state[key]
            st.rerun()
        
        if analyze_all:
            results = []
            images = []
            cam_images = []
            predictions = []
            probs_normal = []
            probs_tb = []
            process_times = []
            filenames = []
            pdf_buffers = []
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            for i, uploaded_file in enumerate(uploaded_files):
                status_text.markdown(f"""
                <div class="processing-status">
                    <span class="status-icon">üî¨</span>
                    <span>ƒêang x·ª≠ l√Ω {i+1}/{len(uploaded_files)}: {uploaded_file.name}</span>
                </div>
                """, unsafe_allow_html=True)
                
                image = Image.open(uploaded_file).convert('RGB')
                temp_dir = tempfile.mkdtemp()
                temp_file_path = os.path.join(temp_dir, uploaded_file.name)
                image.save(temp_file_path)
                
                cam_image, prediction, prob_normal, prob_tb, process_time = apply_cam(
                    temp_file_path, model, preprocess, last_conv_layer)
                
                pdf_buffer = create_pdf_report(
                    image, cam_image, prediction, prob_normal, prob_tb, process_time, uploaded_file.name)
                
                images.append(image)
                cam_images.append(cam_image)
                predictions.append(prediction)
                probs_normal.append(prob_normal)
                probs_tb.append(prob_tb)
                process_times.append(process_time)
                filenames.append(uploaded_file.name)
                pdf_buffers.append(pdf_buffer)
                
                results.append({
                    'T√™n file': uploaded_file.name,
                    'K·∫øt qu·∫£': 'Lao ph·ªïi' if prediction == 1 else 'B√¨nh th∆∞·ªùng',
                    'X√°c su·∫•t b√¨nh th∆∞·ªùng': f'{prob_normal:.2%}',
                    'X√°c su·∫•t lao ph·ªïi': f'{prob_tb:.2%}',
                    'Th·ªùi gian x·ª≠ l√Ω': f'{process_time:.2f}s'
                })
                
                progress_bar.progress((i + 1) / len(uploaded_files))
            
            status_text.markdown("""
            <div class="processing-complete">
                <span class="complete-icon">‚ú®</span>
                <span>Ph√¢n t√≠ch ho√†n t·∫•t!</span>
            </div>
            """, unsafe_allow_html=True)
            
            st.session_state.analysis_results = {
                "results": results, "images": images, "cam_images": cam_images,
                "predictions": predictions, "probs_normal": probs_normal,
                "probs_tb": probs_tb, "process_times": process_times,
                "filenames": filenames, "pdf_buffers": pdf_buffers
            }
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        if st.session_state.analysis_results["results"]:
            results = st.session_state.analysis_results["results"]
            predictions = st.session_state.analysis_results["predictions"]
            
            # Th·ªëng k√™ t·ªïng quan
            total = len(predictions)
            normal_count = predictions.count(0)
            tb_count = predictions.count(1)
            
            st.markdown(f"""
            <div class="summary-dashboard">
                <div class="dashboard-card total">
                    <div class="card-icon">üìä</div>
                    <div class="card-content">
                        <div class="card-number">{total}</div>
                        <div class="card-label">T·ªïng s·ªë ·∫£nh</div>
                    </div>
                </div>
                <div class="dashboard-card normal">
                    <div class="card-icon">‚úÖ</div>
                    <div class="card-content">
                        <div class="card-number">{normal_count}</div>
                        <div class="card-label">B√¨nh th∆∞·ªùng</div>
                    </div>
                </div>
                <div class="dashboard-card warning">
                    <div class="card-icon">‚ö†Ô∏è</div>
                    <div class="card-content">
                        <div class="card-number">{tb_count}</div>
                        <div class="card-label">C·∫ßn ch√∫ √Ω</div>
                    </div>
                </div>
            </div>
            """, unsafe_allow_html=True)
            
            # # Bi·ªÉu ƒë·ªì tr√≤n
            # if total > 0:
            #     fig, ax = plt.subplots(figsize=(6, 6))
            #     labels = ['B√¨nh th∆∞·ªùng', 'C·∫ßn ch√∫ √Ω']
            #     sizes = [normal_count, tb_count]
            #     colors = ['#00D4AA', '#FF6B6B']
            #     explode = (0.05, 0.05)
                
            #     wedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, 
            #                                      colors=colors, autopct='%1.1f%%',
            #                                      shadow=True, startangle=90)
            #     ax.set_title('üìà Ph√¢n b·ªë k·∫øt qu·∫£', fontweight='bold', fontsize=14)
                
            #     st.pyplot(fig)
            
            # B·∫£ng k·∫øt qu·∫£
            df = pd.DataFrame(results)
            st.markdown('<div class="results-table">', unsafe_allow_html=True)
            st.dataframe(df, use_container_width=True, hide_index=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Hi·ªÉn th·ªã c√°c tr∆∞·ªùng h·ª£p c·∫ßn ch√∫ √Ω
            if tb_count > 0:
                st.markdown("""
                <div class="attention-section">
                    <h3>üîç C√°c tr∆∞·ªùng h·ª£p c·∫ßn ch√∫ √Ω</h3>
                </div>
                """, unsafe_allow_html=True)
                
                images = st.session_state.analysis_results["images"]
                cam_images = st.session_state.analysis_results["cam_images"]
                filenames = st.session_state.analysis_results["filenames"]
                
                for idx, (img, cam_img, pred, filename) in enumerate(zip(images, cam_images, predictions, filenames)):
                    if pred == 1:
                        col1, col2 = st.columns(2)
                        with col1:
                            st.image(img, caption=f"üì∏ {filename}", use_container_width=True)
                        with col2:
                            st.image(cam_img, caption=f"üéØ CAM - {filename}", use_container_width=True)
            
            # PDF Downloads
            st.markdown("""
            <div class="download-section">
                <h3>üìã T·∫£i b√°o c√°o PDF</h3>
            </div>
            """, unsafe_allow_html=True)
            
            pdf_buffers = st.session_state.analysis_results["pdf_buffers"]
            filenames = st.session_state.analysis_results["filenames"]
            
            for idx, (filename, pdf_buffer) in enumerate(zip(filenames, pdf_buffers)):
                pdf_col1, pdf_col2 = st.columns([3, 1])
                with pdf_col1:
                    result_text = "C·∫ßn ch√∫ √Ω" if predictions[idx] == 1 else "B√¨nh th∆∞·ªùng"
                    status_class = "warning" if predictions[idx] == 1 else "normal"
                    st.markdown(f"""
                    <div class="pdf-download-item">
                        <div class="file-info">
                            <span class="file-name">üìÑ {filename}</span>
                            <span class="file-status {status_class}">{result_text}</span>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                with pdf_col2:
                    st.download_button(
                        label="üìã T·∫£i PDF",
                        data=pdf_buffer,
                        file_name=f"bao_cao_{filename.split('.')[0]}.pdf",
                        mime="application/pdf",
                        key=f"download_pdf_{idx}"
                    )

elif selected_tab == "ü§ñ Tr·ª£ l√Ω AI":
    st.markdown("""
    <div class="content-section">
        <div class="section-title">
            <span class="title-icon">ü§ñ</span>
            <h2>Tr·ª£ l√Ω AI th√¥ng minh</h2>
        </div>
        <p class="section-desc">ƒê·∫∑t c√¢u h·ªèi v·ªÅ b·ªánh lao ph·ªïi v√† c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng</p>
    </div>
    """, unsafe_allow_html=True)
    
    qa_dict = load_chatbot_data()
    
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
    
    chat_col1, chat_col2 = st.columns([1, 1])
    
    with chat_col1:
        st.markdown("""
        <div class="chat-sidebar">
            <div class="chat-header">
                <span class="chat-icon">üí¨</span>
                <h3>C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h3>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠", key="clear_history"):
            st.session_state.chat_history = []
            st.rerun()
        
        st.markdown('<div class="question-cards">', unsafe_allow_html=True)
        for i, question in enumerate(qa_dict.keys()):
            if st.button(f"‚ùì {question}", key=f"q_{i}", use_container_width=True):
                st.session_state.chat_history.append({
                    "question": question,
                    "answer": qa_dict[question]
                })
        st.markdown('</div>', unsafe_allow_html=True)
    
    with chat_col2:
        st.markdown("""
        <div class="chat-area">
            <div class="chat-header">
                <span class="chat-icon">üí≠</span>
                <h3>Cu·ªôc tr√≤ chuy·ªán</h3>
            </div>
        </div>
        """, unsafe_allow_html=True)
        
        if not st.session_state.chat_history:
            st.markdown("""
            <div class="empty-chat-state">
                <div class="empty-icon">ü§ñ</div>
                <h4>Ch√†o b·∫°n!</h4>
                <p>H√£y ch·ªçn m·ªôt c√¢u h·ªèi t·ª´ danh s√°ch b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán.</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            for i, chat in enumerate(st.session_state.chat_history):
                st.markdown(f"""
                <div class="chat-bubble user">
                    <div class="bubble-avatar">üë§</div>
                    <div class="bubble-content">
                        <div class="bubble-text">{chat["question"]}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                st.markdown(f"""
                <div class="chat-bubble bot">
                    <div class="bubble-avatar">ü§ñ</div>
                    <div class="bubble-content">
                        <div class="bubble-text">{chat["answer"]}</div>
                    </div>
                </div>
                """, unsafe_allow_html=True)

elif selected_tab == "‚ÑπÔ∏è H∆∞·ªõng d·∫´n":
    st.markdown("""
    <div class="content-section">
        <div class="section-title">
            <span class="title-icon">‚ÑπÔ∏è</span>
            <h2>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h2>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # T·∫°o accordion-style info sections
    info_sections = [
        {
            "title": "üéØ Gi·ªõi thi·ªáu h·ªá th·ªëng",
            "content": """
            **AI Lung Diagnostics** l√† h·ªá th·ªëng ch·∫©n ƒëo√°n th√¥ng minh s·ª≠ d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o 
            ƒë·ªÉ ph√°t hi·ªán s·ªõm c√°c d·∫•u hi·ªáu b·ªánh lao ph·ªïi qua ·∫£nh X-quang ng·ª±c.
            
            H·ªá th·ªëng ƒë∆∞·ª£c ph√°t tri·ªÉn v·ªõi c√¥ng ngh·ªá h·ªçc s√¢u ti√™n ti·∫øn, 
            gi√∫p h·ªó tr·ª£ c√°c b√°c sƒ© trong qu√° tr√¨nh ch·∫©n ƒëo√°n.
            """
        },
        {
            "title": "üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng",
            "content": """
            **B∆∞·ªõc 1:** Ch·ªçn ch·ª©c nƒÉng ph√π h·ª£p t·ª´ sidebar b√™n tr√°i
            - üîç Ph√¢n t√≠ch ƒë∆°n l·∫ª: Cho m·ªôt ·∫£nh X-quang
            - üìä Ph√¢n t√≠ch h√†ng lo·∫°t: Cho nhi·ªÅu ·∫£nh c√πng l√∫c
            
            **B∆∞·ªõc 2:** T·∫£i l√™n ·∫£nh X-quang (JPG, JPEG, PNG)
            
            **B∆∞·ªõc 3:** Nh·∫•n "B·∫Øt ƒë·∫ßu ph√¢n t√≠ch"
            
            **B∆∞·ªõc 4:** Xem k·∫øt qu·∫£ v√† t·∫£i b√°o c√°o PDF
            """
        },
        {
            "title": "üß† V·ªÅ c√¥ng ngh·ªá AI",
            "content": """
            **M√¥ h√¨nh h·ªçc s√¢u:** S·ª≠ d·ª•ng ResNet ƒë∆∞·ª£c hu·∫•n luy·ªán tr√™n h√†ng ngh√¨n ·∫£nh X-quang
            
            **CAM (Class Activation Map):** Tr·ª±c quan h√≥a v√πng nghi ng·ªù tr√™n ·∫£nh
            
            **ƒê·ªô ch√≠nh x√°c:** 99.2% tr√™n t·∫≠p d·ªØ li·ªáu ki·ªÉm th·ª≠
            
            **Th·ªùi gian x·ª≠ l√Ω:** D∆∞·ªõi 3 gi√¢y cho m·ªói ·∫£nh
            """
        }
    ]
    
    for section in info_sections:
        with st.expander(section["title"], expanded=False):
            st.markdown(section["content"])
    
    # Warning section
    st.markdown("""
    <div class="warning-panel">
        <div class="warning-header">
            <span class="warning-icon">‚ö†Ô∏è</span>
            <h3>L∆∞u √Ω quan tr·ªçng</h3>
        </div>
        <div class="warning-content">
            <p><strong>K·∫øt qu·∫£ t·ª´ h·ªá th·ªëng n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o v√† h·ªó tr·ª£.</strong></p>
            <p>Kh√¥ng thay th·∫ø ch·∫©n ƒëo√°n c·ªßa b√°c sƒ© chuy√™n khoa. 
            Vui l√≤ng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c.</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Footer info
    st.markdown("""
    <div class="footer-info">
        <div class="footer-content">
            <h4>üéì Th√¥ng tin ph√°t tri·ªÉn</h4>
            <p>ƒê·ªì √°n chuy√™n ng√†nh - ·ª®ng d·ª•ng AI trong y t·∫ø</p>
            <p>¬© 2025 - AI Lung Diagnostics System</p>
        </div>
    </div>
    """, unsafe_allow_html=True)

