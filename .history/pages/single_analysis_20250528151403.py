import streamlit as st
from PIL import Image
import matplotlib.pyplot as plt
import tempfile
import os

def single_analysis_page(model, preprocess, last_conv_layer, create_pdf_report):
    st.markdown("""
    <div class="content-section">
        <div class="section-title">
            <span class="title-icon">üîç</span>
            <h2>Ph√¢n t√≠ch ·∫£nh X-quang ƒë∆°n l·∫ª</h2>
        </div>
        <p class="section-desc">T·∫£i l√™n m·ªôt ·∫£nh X-quang ƒë·ªÉ ph√¢n t√≠ch v√† nh·∫≠n k·∫øt qu·∫£ ch·∫©n ƒëo√°n chi ti·∫øt</p>
    </div>
    """, unsafe_allow_html=True)

    with open('styles/single_analysis.css') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

    upload_col, preview_col = st.columns([1, 1])

    with upload_col:
        st.markdown("""
        <div class="upload-section">
            <div class="upload-header">
                <h3>üìÅ T·∫£i l√™n ·∫£nh X-quang</h3>
                <p>H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG</p>
            </div>
        </div>
        """, unsafe_allow_html=True)

        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh X-quang",
            type=["jpg", "jpeg", "png"],
            key="single_upload",
            help="K√©o th·∫£ ·∫£nh v√†o ƒë√¢y ho·∫∑c nh·∫•n ƒë·ªÉ ch·ªçn file"
        )

        if uploaded_file:
            image = Image.open(uploaded_file).convert('RGB')
            btn_col1, btn_col2 = st.columns(2)
            with btn_col1:
                analyze_btn = st.button("üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch", key="analyze_single", type="primary")
            with btn_col2:
                reset_btn = st.button("üîÑ L√†m m·ªõi", key="reset_single")

            if reset_btn:
                st.rerun()

            if analyze_btn:
                with st.spinner("üî¨ ƒêang ph√¢n t√≠ch..."):
                    temp_dir = tempfile.mkdtemp()
                    temp_file_path = os.path.join(temp_dir, uploaded_file.name)
                    image.save(temp_file_path)

                    from src.visualization import apply_cam
                    cam_image, prediction, prob_normal, prob_tb, process_time = apply_cam(
                        temp_file_path, model, preprocess, last_conv_layer)

                    with preview_col:
                        if prediction == 1:
                            st.markdown("""
                            <div class="result-alert danger">
                                <div class="alert-icon">‚ö†Ô∏è</div>
                                <div class="alert-content">
                                    <h3>Ph√°t hi·ªán b·∫•t th∆∞·ªùng</h3>
                                    <p>C√≥ d·∫•u hi·ªáu nghi ng·ªù lao ph·ªïi</p>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                        else:
                            st.markdown("""
                            <div class="result-alert success">
                                <div class="alert-icon">‚úÖ</div>
                                <div class="alert-content">
                                    <h3>K·∫øt qu·∫£ b√¨nh th∆∞·ªùng</h3>
                                    <p>Kh√¥ng ph√°t hi·ªán d·∫•u hi·ªáu b·∫•t th∆∞·ªùng</p>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)

                        st.markdown('<div class="image-viewer">', unsafe_allow_html=True)
                        st.image(cam_image, caption="üéØ V√πng ph√¢n t√≠ch CAM", use_container_width=True)
                        st.markdown('</div>', unsafe_allow_html=True)

                        fig, ax = plt.subplots(figsize=(8, 4))
                        categories = ['B√¨nh th∆∞·ªùng', 'Lao ph·ªïi']
                        values = [prob_normal, prob_tb]
                        colors = ['#00D4AA', '#FF6B6B']
                        bars = ax.barh(categories, values, color=colors)
                        ax.set_xlim(0, 1)
                        ax.set_xlabel('X√°c su·∫•t')
                        ax.set_title('üìä Ph√¢n t√≠ch x√°c su·∫•t', fontweight='bold')
                        for i, (bar, value) in enumerate(zip(bars, values)):
                            ax.text(value + 0.02, i, f'{value:.1%}', va='center', fontweight='bold')
                        st.pyplot(fig)

                        st.markdown(f"""
                        <div class="info-panel">
                            <div class="info-row">
                                <span class="info-label">‚è±Ô∏è Th·ªùi gian x·ª≠ l√Ω:</span>
                                <span class="info-value">{process_time:.2f}s</span>
                            </div>
                            <div class="info-row">
                                <span class="info-label">üìÑ T√™n file:</span>
                                <span class="info-value">{uploaded_file.name}</span>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)

                        pdf_buffer = create_pdf_report(
                            image, cam_image, prediction, prob_normal, prob_tb, process_time, uploaded_file.name)

                        st.download_button(
                            label="üìã T·∫£i b√°o c√°o PDF",
                            data=pdf_buffer,
                            file_name=f"bao_cao_{uploaded_file.name.split('.')[0]}.pdf",
                            mime="application/pdf",
                            key="download_single_pdf"
                        )

    with preview_col:
        if uploaded_file:
            st.markdown('<div class="image-viewer">', unsafe_allow_html=True)
            st.image(image, caption="üì∏ ·∫¢nh X-quang g·ªëc", use_container_width=True)
            st.markdown('</div>', unsafe_allow_html=True)