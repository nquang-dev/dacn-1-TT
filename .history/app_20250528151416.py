import streamlit as st
import torch
import torchvision.transforms as transforms
from PIL import Image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from src.model import get_model
from src.visualization import apply_cam
import tempfile
import os
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors as reportlab_colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
import matplotlib
matplotlib.use('Agg')
from pages.single_analysis import single_analysis_page
from pages.batch_analysis import batch_analysis_page
from pages.ai_assistant import ai_assistant_page
from pages.guide import guide_page

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="AI X-Ray Lung Scanner",
    layout="wide",
    initial_sidebar_state="expanded",
    page_icon="ü´Å"
)

# ƒêƒÉng k√Ω font
font_paths = [
    os.path.join(os.path.dirname(__file__), 'DejaVuSans.ttf'),
    os.path.join(os.path.dirname(__file__), 'fonts', 'DejaVuSans.ttf'),
    'DejaVuSans.ttf'
]

font_registered = False
for font_path in font_paths:
    if os.path.exists(font_path):
        try:
            pdfmetrics.registerFont(TTFont('DejaVuSans', font_path))
            font_registered = True
            break
        except Exception as e:
            st.warning(f"Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font t·ª´ {font_path}: {e}")

if not font_registered:
    st.warning("Kh√¥ng th·ªÉ ƒëƒÉng k√Ω font DejaVuSans. S·∫Ω s·ª≠ d·ª•ng font m·∫∑c ƒë·ªãnh.")

# T·∫£i CSS
with open('styles/base.css') as f:
    st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)

# T·∫£i m√¥ h√¨nh
@st.cache_resource
def load_model():
    model = get_model(num_classes=2)
    model.load_state_dict(torch.load('models/best_model.pth', map_location=torch.device('cpu')))
    model.eval()
    return model

# Ti·ªÅn x·ª≠ l√Ω ·∫£nh
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
])

# T·∫°o b√°o c√°o PDF
def create_pdf_report(image, cam_image, prediction, prob_normal, prob_tb, process_time, filename=None):
    # (Gi·ªØ nguy√™n h√†m create_pdf_report t·ª´ file g·ªëc)
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=72)
    styles = getSampleStyleSheet()
    vietnamese_font = 'DejaVuSans'
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        styles.add(ParagraphStyle(name='Vietnamese', fontName=vietnamese_font, fontSize=12))
    else:
        styles.add(ParagraphStyle(name='Vietnamese', fontName='Helvetica', fontSize=12))
    elements = []
    title_style = styles["Heading1"]
    title_style.alignment = 1
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        title_style.fontName = vietnamese_font
    elements.append(Paragraph("K·∫æT QU·∫¢ PH√ÇN T√çCH X-QUANG PH·ªîI", title_style))
    elements.append(Spacer(1, 20))
    date_style = styles["Normal"]
    date_style.alignment = 1
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        date_style.fontName = vietnamese_font
    current_time = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    elements.append(Paragraph(f"Ng√†y gi·ªù ph√¢n t√≠ch: {current_time}", date_style))
    elements.append(Spacer(1, 20))
    if filename:
        file_style = styles["Normal"]
        if vietnamese_font in pdfmetrics.getRegisteredFontNames():
            file_style.fontName = vietnamese_font
        elements.append(Paragraph(f"T√™n file: {filename}", file_style))
        elements.append(Spacer(1, 10))
    img_path = tempfile.mktemp(suffix='.png')
    cam_path = tempfile.mktemp(suffix='.png')
    image.save(img_path)
    if isinstance(cam_image, np.ndarray):
        cam_image_pil = Image.fromarray(cam_image)
        cam_image_pil.save(cam_path)
    else:
        cam_image.save(cam_path)
    heading_style = styles["Heading2"]
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        heading_style.fontName = vietnamese_font
    elements.append(Paragraph("·∫¢nh X-quang g·ªëc:", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(img_path, width=400, height=300))
    elements.append(Spacer(1, 20))
    elements.append(Paragraph("·∫¢nh ph√¢n t√≠ch (CAM):", heading_style))
    elements.append(Spacer(1, 10))
    elements.append(RLImage(cam_path, width=400, height=300))
    elements.append(Spacer(1, 20))
    elements.append(Paragraph("K·∫æT QU·∫¢ CH·∫®N ƒêO√ÅN:", heading_style))
    elements.append(Spacer(1, 10))
    if prediction == 1:
        result_text = "PH√ÅT HI·ªÜN D·∫§U HI·ªÜU LAO PH·ªîI"
        result_color = reportlab_colors.red
    else:
        result_text = "KH√îNG PH√ÅT HI·ªÜN D·∫§U HI·ªÜU LAO PH·ªîI"
        result_color = reportlab_colors.green
    result_style = ParagraphStyle(
        name='ResultStyle',
        parent=styles["Heading2"],
        textColor=result_color,
        alignment=1
    )
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        result_style.fontName = vietnamese_font
    elements.append(Paragraph(result_text, result_style))
    elements.append(Spacer(1, 20))
    data = [
        ["Th√¥ng s·ªë", "Gi√° tr·ªã"],
        ["X√°c su·∫•t b√¨nh th∆∞·ªùng", f"{prob_normal:.2%}"],
        ["X√°c su·∫•t lao ph·ªïi", f"{prob_tb:.2%}"],
        ["Th·ªùi gian x·ª≠ l√Ω", f"{process_time:.2f} gi√¢y"]
    ]
    table = Table(data, colWidths=[200, 200])
    use_font = vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica'
    bold_font = vietnamese_font if vietnamese_font in pdfmetrics.getRegisteredFontNames() else 'Helvetica-Bold'
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (1, 0), reportlab_colors.grey),
        ('TEXTCOLOR', (0, 0), (1, 0), reportlab_colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (1, 0), bold_font),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), reportlab_colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, reportlab_colors.black),
        ('FONTNAME', (0, 1), (0, -1), use_font),
        ('FONTNAME', (1, 1), (1, -1), use_font),
    ]))
    elements.append(table)
    elements.append(Spacer(1, 20))
    note_heading_style = styles["Heading3"]
    if vietnamese_font in pdfmetrics.getRegisteredFontNames():
        note_heading_style.fontName = vietnamese_font
    elements.append(Paragraph("L∆∞u √Ω:", note_heading_style))
    elements.append(Paragraph("K·∫øt qu·∫£ n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Vui l√≤ng tham kh·∫£o √Ω ki·∫øn c·ªßa b√°c sƒ© chuy√™n khoa ƒë·ªÉ c√≥ ch·∫©n ƒëo√°n ch√≠nh x√°c.", styles["Vietnamese"]))
    doc.build(elements)
    os.unlink(img_path)
    os.unlink(cam_path)
    buffer.seek(0)
    return buffer

# T·∫£i m√¥ h√¨nh
try:
    with st.spinner("üîÑ Kh·ªüi t·∫°o h·ªá th·ªëng AI..."):
        model = load_model()
        last_conv_layer = model.layer4[-1]
    st.markdown("""
    <div class="success-notification">
        <div class="notification-icon">‚ú®</div>
        <div class="notification-text">H·ªá th·ªëng AI ƒë√£ s·∫µn s√†ng ho·∫°t ƒë·ªông!</div>
    </div>
    """, unsafe_allow_html=True)
except Exception as e:
    st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh: {e}")
    st.stop()

# Sidebar
with st.sidebar:
    st.markdown("""
    <div class="sidebar-header">
        <div class="sidebar-icon">üî¨</div>
        <h2>AI Lung Diagnostics</h2>
    </div>
    """, unsafe_allow_html=True)
    st.markdown("---")
    st.markdown("**üéØ Ch·ªçn ch·ª©c nƒÉng:**")
    if "selected_function" not in st.session_state:
        st.session_state.selected_function = "üîç Ph√¢n t√≠ch ƒë∆°n l·∫ª"
    if st.button("üîç Ph√¢n t√≠ch ƒë∆°n l·∫ª", key="btn_single", use_container_width=True):
        st.session_state.selected_function = "üîç Ph√¢n t√≠ch ƒë∆°n l·∫ª"
    if st.button("üìä Ph√¢n t√≠ch h√†ng lo·∫°t", key="btn_batch", use_container_width=True):
        st.session_state.selected_function = "üìä Ph√¢n t√≠ch h√†ng lo·∫°t"
    if st.button("ü§ñ Tr·ª£ l√Ω AI", key="btn_ai", use_container_width=True):
        st.session_state.selected_function = "ü§ñ Tr·ª£ l√Ω AI"
    if st.button("‚ÑπÔ∏è H∆∞·ªõng d·∫´n", key="btn_guide", use_container_width=True):
        st.session_state.selected_function = "‚ÑπÔ∏è H∆∞·ªõng d·∫´n"
    st.markdown(f"**ƒêang s·ª≠ d·ª•ng:** {st.session_state.selected_function}")
    st.markdown("---")
    st.markdown("""
    <div class="sidebar-stats">
        <div class="stats-title">üìà Th·ªëng k√™ h·ªá th·ªëng</div>
        <div class="stat-item">
            <div class="stat-icon">üéØ</div>
            <div class="stat-info">
                <div class="stat-value">99.2%</div>
                <div class="stat-label">ƒê·ªô ch√≠nh x√°c</div>
            </div>
        </div>
        <div class="stat-item">
            <div class="stat-icon">‚ö°</div>
            <div class="stat-info">
                <div class="stat-value">< 3s</div>
                <div class="stat-label">Th·ªùi gian x·ª≠ l√Ω</div>
            </div>
        </div>
        <div class="stat-item">
            <div class="stat-icon">üî¨</div>
            <div class="stat-info">
                <div class="stat-value">ResNet</div>
                <div class="stat-label">M√¥ h√¨nh AI</div>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)

# ƒêi·ªÅu h∆∞·ªõng tab
selected_tab = st.session_state.selected_function
if selected_tab == "üîç Ph√¢n t√≠ch ƒë∆°n l·∫ª":
    single_analysis_page(model, preprocess, last_conv_layer, create_pdf_report)
elif selected_tab == "üìä Ph√¢n t√≠ch h√†ng lo·∫°t":
    batch_analysis_page(model, preprocess, last_conv_layer, create_pdf_report)
elif selected_tab == "ü§ñ Tr·ª£ l√Ω AI":
    ai_assistant_page()
elif selected_tab == "‚ÑπÔ∏è H∆∞·ªõng d·∫´n":
    guide_page()